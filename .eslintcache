[{"/Users/owenosagiede/Desktop/crypto-dash/src/App.js":"1","/Users/owenosagiede/Desktop/crypto-dash/src/Header.js":"2","/Users/owenosagiede/Desktop/crypto-dash/src/SideBar.js":"3","/Users/owenosagiede/Desktop/crypto-dash/src/SmallBox.js":"4","/Users/owenosagiede/Desktop/crypto-dash/src/LongBox.js":"5","/Users/owenosagiede/Desktop/crypto-dash/src/HorzBox.js":"6","/Users/owenosagiede/Desktop/crypto-dash/src/LargeBox.js":"7","/Users/owenosagiede/Desktop/crypto-dash/src/AssetsBox.js":"8","/Users/owenosagiede/Desktop/crypto-dash/src/Sidebar.js":"9","/Users/owenosagiede/Desktop/crypto-dash/src/index.js":"10","/Users/owenosagiede/Desktop/crypto-dash/src/Recent.js":"11","/Users/owenosagiede/Desktop/crypto-dash/src/BalanceBox.js":"12"},{"size":4744,"mtime":1606840951249,"results":"13","hashOfConfig":"14"},{"size":227,"mtime":1606404646780,"results":"15","hashOfConfig":"14"},{"size":196,"mtime":1606405434578,"results":"16","hashOfConfig":"14"},{"size":3635,"mtime":1606769842720,"results":"17","hashOfConfig":"14"},{"size":519,"mtime":1606841431233,"results":"18","hashOfConfig":"14"},{"size":6824,"mtime":1606840827570,"results":"19","hashOfConfig":"14"},{"size":5328,"mtime":1606769821000,"results":"20","hashOfConfig":"14"},{"size":1811,"mtime":1606770892777,"results":"21","hashOfConfig":"14"},{"size":604,"mtime":1606412141763,"results":"22","hashOfConfig":"14"},{"size":175,"mtime":1606403175812,"results":"23","hashOfConfig":"14"},{"size":166,"mtime":1606414569966,"results":"24","hashOfConfig":"14"},{"size":736,"mtime":1606767866021,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1f34c41",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"/Users/owenosagiede/Desktop/crypto-dash/src/App.js",["55"],"/Users/owenosagiede/Desktop/crypto-dash/src/Header.js",[],"/Users/owenosagiede/Desktop/crypto-dash/src/SideBar.js",[],"/Users/owenosagiede/Desktop/crypto-dash/src/SmallBox.js",["56"],"import React, { useEffect, useState, useCallback } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport './SmallBox.css';\n\nfunction SmallBox(props) {\n    const [chartNums, setChartNums] = useState([])\n    const [chartLabels, setChartLabels] = useState([])\n    const [chartData, setChartData] = useState({})\n\n    const x = [];\n    const y = [];\n\nconst fetchData = useCallback(async () => {\n    const response = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${props.id}/market_chart?vs_currency=usd&days=1`\n    );\n    const data = await response.json();\n    if (data && data.prices) {\n      for (let i = 0; i < data.prices.length; i++) {\n        x.push(data.prices[i][0]);\n        setChartLabels(x);\n      }\n\n      for (let i = 0; i < data.prices.length; i++) {\n        y.push(data.prices[i][1]);\n        setChartNums(y);\n      }\n    }\n  }, [props]);\n\n  const chart = useCallback(async () => {\n    await fetchData();\n\n    setChartData({\n      labels: chartLabels,\n      datasets: [\n        {\n          label: \"$\",\n          data: chartNums,\n          backgroundColor: [\"rgba(0,0,0,0.09)\"],\n          borderColor: `${props.color}`,\n          borderWidth: 3,\n          borderJoinStyle: \"round\",\n          borderCapStyle: \"round\",\n          pointRadius: 0,\n          pointHitRadius: 10,\n          lineTension: 0.2\n        }\n      ]\n    });\n  }, [chartNums, chartLabels, fetchData, props.color]);\n\n  useEffect(() => {\n    chart();\n  }, [chart]);\n\n    return (\n        <div id={props.id} className=\"smallBox\">\n            <div className=\"smallBox_info\">\n                <img className=\"smallBox-icon\" src={props.image} alt={props.symbol}/>\n                <h2>{props.title}</h2>\n            </div>\n            \n            <div className=\"smallBox_numbers\">\n                <h2 className=\"smallBox-price\">$ {numeral(props.currentPrice).format('0,0.00')}</h2>\n                <h5 className=\"smallBox-roc\">{props.percentChange}</h5>\n            </div>\n            \n            <div className=\"smallBox_graph\">\n                <Line data={chartData} options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {text: 'ThickBoyz', display: false},\n                    legend: {display: false},\n                    layout: {\n                        padding: {\n                          left: 0,\n                          right: 0,\n                          top: 0,\n                          bottom: 0\n                        }\n                      },\n                      scales: {\n                        xAxes: [{\n                          display: false,\n                          gridLines: {}\n                        }],\n                        yAxes: [{\n                          display: false,\n                          gridLines: {}\n                        }]\n                      },\n                      tooltips: {\n                        callbacks: {\n                          //This removes the tooltip title\n                          title: function() {}\n                       },\n                        //this removes legend color\n                        displayColors: false,\n                        yPadding: 10,\n                        xPadding: 10,\n                        position: 'nearest',\n                        caretSize: 10,\n                        backgroundColor: 'rgba(255,255,255,.9)',\n                        bodyFontSize: 15,\n                        bodyFontColor: '#303030' \n                      },\n                    }}/>  \n            </div>\n        </div>\n    )\n}\n\nexport default SmallBox\n",["57","58"],"/Users/owenosagiede/Desktop/crypto-dash/src/LongBox.js",["59"],"/Users/owenosagiede/Desktop/crypto-dash/src/HorzBox.js",["60","61"],"/Users/owenosagiede/Desktop/crypto-dash/src/LargeBox.js",["62"],"import React, { useEffect, useState, useCallback } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport './LargeBox.css';\n\nfunction LargeBox() {\n    const [chartNums, setChartNums] = useState([])\n    const [chartLabels, setChartLabels] = useState([])\n    const [chartData, setChartData] = useState({})\n    const [currentTime, setCurrentTime] = useState(1);\n    const [currentCoin, setCurrentCoin] = useState('bitcoin')\n\n    const x = [];\n    const y = [];\n\n    function selectTime(e){\n        if(e.target.innerText === \"Day\"){\n            setCurrentTime(1);\n        } else if (e.target.innerText === \"Week\") {\n            setCurrentTime(7)\n        } else if (e.target.innerText === \"Month\") {\n            setCurrentTime(30)\n        } else if (e.target.innerText === \"Year\") {\n            setCurrentTime(365)\n        }\n    }\n\n    function selectCoin(e){\n        if(e.target.options.selectedIndex === 0){\n            setCurrentCoin('bitcoin');\n        } else if(e.target.options.selectedIndex === 1){\n            setCurrentCoin('ethereum');\n        } else if(e.target.options.selectedIndex === 2){\n            setCurrentCoin('stellar');\n        } else if(e.target.options.selectedIndex === 3){\n            setCurrentCoin('tether');\n        }\n    }\n\n    \n\n    const fetchData = useCallback(async () => {\n        const response = await fetch(\n          `https://api.coingecko.com/api/v3/coins/${currentCoin}/market_chart?vs_currency=usd&days=${currentTime}`\n        );\n        const data = await response.json();\n        if (data && data.prices) {\n          for (let i = 0; i < data.prices.length; i++) {\n            x.push(data.prices[i][0]);\n            setChartLabels(x);\n          }\n    \n          for (let i = 0; i < data.prices.length; i++) {\n            y.push(data.prices[i][1]);\n            setChartNums(y);\n          }\n        }\n      }, [currentCoin, currentTime]);\n\n      const chart = useCallback(async () => {\n        await fetchData();\n    \n        setChartData({\n          labels: chartLabels,\n          datasets: [\n            {\n              label: \"$\",\n              data: chartNums,\n              backgroundColor: [\"rgba(0,0,0,0.09)\"],\n              borderColor: \"black\",\n              borderWidth: 3,\n              borderJoinStyle: \"round\",\n              borderCapStyle: \"round\",\n              pointRadius: 0,\n              pointHitRadius: 10,\n              lineTension: 0.2\n            }\n          ]\n        });\n      }, [chartNums, chartLabels, fetchData]);\n\n    useEffect(() => {\n        chart()\n    }, [chart])\n\n    return (\n        <div className=\"largeBox\">\n            <div className=\"largeBox_info\">\n                <select id=\"options\" onChange={selectCoin}>\n                    <option value=\"btc\" >\n                        Bitcoin\n                    </option>\n                    <option value=\"xzc\">\n                        Ethereum\n                    </option>\n                    <option value=\"trc\">\n                        Stellar\n                    </option>\n                    <option value=\"etc\">\n                        Tether\n                    </option>\n                </select>\n                <h2>Chart</h2>\n            </div>\n\n            <div className=\"largeBox_selectors\">\n                <ul>\n                    <li className={currentTime === 1 ? \"active\" : \"\"} onClick={selectTime}>Day</li>\n                    <li className={currentTime === 7 ? \"active\" : \"\"} onClick={selectTime}>Week</li>\n                    <li className={currentTime === 30 ? \"active\" : \"\"} onClick={selectTime}>Month</li>\n                    <li className={currentTime === 365 ? \"active\" : \"\"} onClick={selectTime}>Year</li>\n                </ul>\n            </div>\n\n            <div className=\"largeBox_graph\">\n                <Line data={chartData} options={{\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    title: {text: 'ThickBoyz', display: false},\n                    legend: {display: false},\n                    layout: {\n                        padding: {\n                          left: 0,\n                          right: 0,\n                          top: 0,\n                          bottom: 0\n                        }\n                      },\n                      scales: {\n                        xAxes: [{\n                          display: false,\n                          gridLines: {}\n                        }],\n                        yAxes: [{\n                          display: false,\n                          gridLines: {}\n                        }]\n                      },\n                      tooltips: {\n                        callbacks: {\n                          //This removes the tooltip title\n                          title: function() {}\n                       },\n                        //this removes legend color\n                        displayColors: false,\n                        yPadding: 10,\n                        xPadding: 10,\n                        position: 'nearest',\n                        caretSize: 10,\n                        backgroundColor: 'rgba(255,255,255,.9)',\n                        bodyFontSize: 15,\n                        bodyFontColor: '#303030' \n                      }\n                    }}/>   \n            </div> \n        </div>\n    )\n}\nexport default LargeBox\n","/Users/owenosagiede/Desktop/crypto-dash/src/AssetsBox.js",["63","64","65","66"],"import React from 'react';\nimport './AssetsBox.css';\nimport numeral from 'numeral'\n\nfunction AssetsBox(props) {\n    return (\n        <div className=\"assetsBox\">\n            <h2>Assets</h2>\n            <div id=\"assets\">\n                <div id=\"assets-header\">\n                    <h3>Currency</h3>\n                    <h3>Total Units</h3>\n                    <h3>Current Total</h3>\n                </div>\n                <div className=\"assets-input\">\n                    <img src={props.data[0].image} />\n                    <h3 className=\"assets-total\">{props.bitcoinAssets}</h3>\n                    <h3 className=\"assets-price\">$ {numeral(props.data[0].current_price * props.bitcoinAssets).format(\"0,0.00\")}</h3>\n                </div>\n                <div className=\"assets-input\">\n                    <img src={props.data[1].image} />\n                    <h3 className=\"assets-total\">{props.ethereumAssets}</h3>\n                    <h3 className=\"assets-price\">$ {numeral(props.data[1].current_price * props.ethereumAssets).format(\"0,0.00\")}</h3>\n                </div>\n                <div className=\"assets-input\">\n                    <img src={props.data[10].image} />\n                    <h3 className=\"assets-total\">{props.stellarAssets}</h3>\n                    <h3 className=\"assets-price\">$ {numeral(props.data[10].current_price * props.stellarAssets).format(\"0,0.00\")}</h3>\n                </div>\n                <div className=\"assets-input\">\n                    <img src={props.data[3].image} />\n                    <h3 className=\"assets-total\">{props.tetherAssets}</h3>\n                    <h3 className=\"assets-price\">$ {numeral(props.data[3].current_price * props.tetherAssets).format(\"0,0.00\")}</h3>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AssetsBox\n","/Users/owenosagiede/Desktop/crypto-dash/src/Sidebar.js",[],"/Users/owenosagiede/Desktop/crypto-dash/src/index.js",[],"/Users/owenosagiede/Desktop/crypto-dash/src/Recent.js",[],"/Users/owenosagiede/Desktop/crypto-dash/src/BalanceBox.js",["67"],"import React from 'react'\nimport './SmallBox.css';\nimport numeral from 'numeral'\n\nfunction BalanceBox(props) {\n    return (\n        <div id={props.id} className=\"smallBox\">\n            <div className=\"smallBox_info\">\n                <img className=\"smallBox-icon\" src={props.image} alt={props.symbol}/>\n                <h2>{props.title}</h2>\n            </div>\n            \n            <div className=\"smallBox_numbers\">\n                <h1 className=\"smallBox-price\">$ {numeral(props.currentPrice).format('0,0.00')}</h1>\n                <h5 className=\"smallBox-roc\"></h5>\n            </div>\n            \n            <div className=\"smallBox_graph\">\n                \n            </div>\n        </div>\n    )\n}\n\nexport default BalanceBox\n",{"ruleId":"68","severity":1,"message":"69","line":113,"column":11,"nodeType":"70","endLine":113,"endColumn":42},{"ruleId":"71","severity":1,"message":"72","line":30,"column":6,"nodeType":"73","endLine":30,"endColumn":13,"suggestions":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":14},{"ruleId":"79","severity":1,"message":"83","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":24},{"ruleId":"71","severity":1,"message":"84","line":89,"column":8,"nodeType":"73","endLine":89,"endColumn":19,"suggestions":"85"},{"ruleId":"71","severity":1,"message":"72","line":57,"column":10,"nodeType":"73","endLine":57,"endColumn":36,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":16,"column":21,"nodeType":"89","endLine":16,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":21,"column":21,"nodeType":"89","endLine":21,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":26,"column":21,"nodeType":"89","endLine":26,"endColumn":55},{"ruleId":"87","severity":1,"message":"88","line":31,"column":21,"nodeType":"89","endLine":31,"endColumn":54},{"ruleId":"90","severity":1,"message":"91","line":15,"column":17,"nodeType":"89","endLine":15,"endColumn":46},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.","ArrayExpression",["92"],"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Recent' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["95"],["96"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",{"desc":"97","fix":"98"},"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [props.id, x, y]",{"range":"103","text":"104"},"Update the dependencies array to be: [props, props.buy]",{"range":"105","text":"106"},"Update the dependencies array to be: [currentCoin, currentTime, x, y]",{"range":"107","text":"108"},[889,896],"[props.id, x, y]",[4319,4330],"[props, props.buy]",[1850,1876],"[currentCoin, currentTime, x, y]"]